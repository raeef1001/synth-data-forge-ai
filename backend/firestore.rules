rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function hasValidSubscription() {
      return getUserData().subscriptionTier in ['free', 'pro', 'enterprise'];
    }
    
    function isWithinSchemaLimit() {
      let tierLimits = {
        'free': 3,
        'pro': 10,
        'enterprise': 100
      };
      let userSchemas = getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.schemasCount;
      return userSchemas <= tierLimits[getUserData().subscriptionTier];
    }

    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if false; // Prevent user deletion through Firestore
    }

    // Schemas collection
    match /schemas/{schemaId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        (resource.data.isPublic == true && hasValidSubscription())
      );
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        isWithinSchemaLimit();
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Datasets collection
    match /datasets/{datasetId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        (resource.data.isPublic == true && hasValidSubscription())
      );
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Checkout sessions collection
    match /checkoutSessions/{sessionId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow write: if false; // Only managed through backend
    }
  }
}
